{"version":3,"sources":["phone.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newPerson","post","personId","delete","changedPerson","put","Filter","handleFilterChange","nameFilter","onChange","value","Notification","message","type","className","Persons","persons","handleDeletePerson","setPersons","filter","person","name","toLowerCase","includes","map","number","onClick","id","PersonForm","handleAddPerson","handleNewNameChange","newName","handleNewNumberChange","newNumber","onSubmit","App","useState","setNewName","setNewNumber","setNameFilter","setMessage","messageType","setMessageType","useEffect","phoneServices","catch","error","console","log","event","target","preventDefault","duplicate","find","p","undefined","window","confirm","updatedPerson","setTimeout","savedPerson","concat","status","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b1fddbb9.chunk.js","sourcesContent":["import axios from 'axios'\n\n// const baseUrl = 'https://pure-tor-96619.herokuapp.com/api/persons' || 'http://localhost:3001/persons'\nconst baseUrl = 'api/persons'\nconst getAll = () => {\n  const promise = axios.get(baseUrl)\n  return promise.then(response => response.data)\n}\n\nconst create = (newPerson) =>{\n  const promise = axios.post(baseUrl,newPerson)\n  return promise.then(response => response.data)\n}\n\nconst remove = (personId) =>{\n  const promise = axios.delete(`${baseUrl}/${personId}`)\n  return promise.then(response => response)\n}\n\nconst update = (personId,changedPerson) =>{\n  const promise = axios.put(`${baseUrl}/${personId}`,changedPerson)\n  return promise.then(response => response.data)}\n\nexport default {getAll, create, remove, update}","import React, { useEffect, useState } from 'react'\nimport phoneServices from './phone'\n\nconst Filter = ({ handleFilterChange, nameFilter }) => {\n  return (\n    <div>\n      filter: <input onChange={handleFilterChange} value={nameFilter} />\n    </div>\n  )\n}\n\nconst Notification = ({ message, type }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className={type}>\n      {message}\n    </div>\n  )\n}\n\nconst Persons = ({ persons, nameFilter, setPersons, handleDeletePerson }) => {\n  // const handleDeletePerson = (id, name) => {\n  //   console.log(`want to delete id=${id}`)\n  //   if (window.confirm(`Delete ${name} ?`) === true)\n  //     phoneServices.remove(id).then(response => {\n  //       if (response.status === 200) {\n  //         console.log('delete success')\n  //         setPersons(persons.filter(person => person.id !== id))\n  //       }\n  //     }).catch(error => {\n  //       setMessageType('success')\n  //       setMessage(`Updated ${updatedPerson.name}`)\n  //       setTimeout(() => setMessage(null), 5000)\n  //     })\n  // }\n  const renderPersons = persons.filter((person) =>\n    person.name.toLowerCase()\n      .includes(nameFilter.toLowerCase()))\n    .map((person) => <div className='person' key={person.name}>{person.name} {person.number} <button onClick={() => handleDeletePerson(person.id, person.name)}>delete</button></div>)\n  return (\n    renderPersons\n  )\n}\n\nconst PersonForm = ({ handleAddPerson, handleNewNameChange, newName, handleNewNumberChange, newNumber }) => {\n  return (\n    <form onSubmit={handleAddPerson}>\n      <div>\n        name: <input onChange={handleNewNameChange} value={newName} />\n      </div>\n      <div>\n        number: <input onChange={handleNewNumberChange} value={newNumber} />\n      </div>\n      <div>\n        <button type=\"submit\" >add</button>\n      </div>\n      <div>debug: {newName}</div>\n    </form>\n  )\n}\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [nameFilter, setNameFilter] = useState('')\n  const [message, setMessage] = useState(null)\n  const [messageType, setMessageType] = useState('success')\n  const handleNewNameChange = (event) => {\n    event.preventDefault()\n    setNewName(event.target.value)\n  }\n  const handleNewNumberChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const handleFilterChange = (event) => {\n    setNameFilter(event.target.value)\n  }\n  const handleAddPerson = (event) => {\n    event.preventDefault();\n    let duplicate = false\n    const person = persons.find(p => p.name === newName)\n    if (person !== undefined) duplicate = true\n    if (!duplicate) {\n      const newPerson = { name: newName, number: newNumber }\n      phoneServices.create(newPerson).then(savedPerson => {\n        setMessageType('success')\n        setMessage(`Added ${savedPerson.name}`)\n        setTimeout(() => setMessage(null), 5000)\n        setPersons(persons.concat(savedPerson))\n      })\n    } else {\n      if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`))\n        phoneServices.update(person.id, { ...person, number: newNumber }).then(updatedPerson => {\n          setMessageType('success')\n          setMessage(`Updated ${updatedPerson.name}`)\n          setTimeout(() => setMessage(null), 5000)\n          setPersons(persons.map(p => p.id === updatedPerson.id ? updatedPerson : p))\n        })\n    }\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const handleDeletePerson = (id, name) => {\n    console.log(`want to delete id=${id}`)\n    if (window.confirm(`Delete ${name} ?`) === true)\n      phoneServices.remove(id).then(response => {\n        if (response.status === 200) {\n          console.log('delete success')\n          setPersons(persons.filter(person => person.id !== id))\n        }\n      }).catch(error => {\n        setMessageType('error')\n        setMessage(`Information about ${name} has already been deleted from the server`)\n        setTimeout(() => setMessage(null), 5000)\n        setPersons(persons.filter(person => person.id !== id))\n      })\n  }\n\n\n  useEffect(() => {\n    phoneServices.getAll()\n      .then(persons => setPersons(persons))\n      .catch(error => console.log('getAll() error'))\n  }, [])\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <Notification message={message} type={messageType} />\n      <Filter handleFilterChange={handleFilterChange} nameFilter={nameFilter} />\n\n      <h1>add a new</h1>\n      <PersonForm handleAddPerson={handleAddPerson} handleNewNameChange={handleNewNameChange} newName={newName} handleNewNumberChange={handleNewNumberChange} newNumber={newNumber} />\n      <h1>Numbers</h1>\n      <Persons persons={persons} nameFilter={nameFilter} setPersons={setPersons} handleDeletePerson={handleDeletePerson}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App.js'\nimport './index.css'\n\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}